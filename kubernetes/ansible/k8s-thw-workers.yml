---
- name: Bootstrapping the etcd Cluster
  hosts: workers
  become: true
  vars:
    etcd_version: v3.3.5
  tasks:
    - name: install deps
      apt:
        name: "{{ item }}"
        state: present
        update_cache: true
        install_recommends: no
      with_items:
        - socat
        - ipset
        - conntrack

    - name: Create install dirs
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /etc/cni/net.d 
        - /opt/cni/bin 
        - /var/lib/kubelet 
        - /var/lib/kube-proxy 
        - /var/lib/kubernetes 
        - /var/run/kubernetes
        - /etc/containerd

    - name: download kubectl kube-proxy kubelet runsc
      get_url:
        url: "{{ item }}"
        dest: /usr/local/bin/
        mode: 0755
      with_items:
        - https://storage.googleapis.com/kubernetes-release/release/v1.10.2/bin/linux/amd64/kubectl
        - https://storage.googleapis.com/kubernetes-release/release/v1.10.2/bin/linux/amd64/kube-proxy
        - https://storage.googleapis.com/kubernetes-release/release/v1.10.2/bin/linux/amd64/kubelet
        - https://storage.googleapis.com/kubernetes-the-hard-way/runsc
        - https://github.com/opencontainers/runc/releases/download/v1.0.0-rc5/runc.amd64

    - name: download runc.amd64
      get_url:
        url: "{{ item }}"
        dest: /usr/local/bin/runc
        mode: 0755
      with_items:
        - https://github.com/opencontainers/runc/releases/download/v1.0.0-rc5/runc.amd64
      tags: download

    - unarchive:
        src: https://github.com/kubernetes-incubator/cri-tools/releases/download/v1.0.0-beta.0/crictl-v1.0.0-beta.0-linux-amd64.tar.gz
        dest: /usr/local/bin/
        remote_src: true
      tags: cri

    - unarchive:
        src: https://github.com/containernetworking/plugins/releases/download/v0.6.0/cni-plugins-amd64-v0.6.0.tgz
        dest: /opt/cni/bin/
        remote_src: true
      tags: cni

    - unarchive:
        src: https://github.com/containerd/containerd/releases/download/v1.1.0/containerd-1.1.0.linux-amd64.tar.gz
        dest: /
        remote_src: true
      tags: container

  # --- configure CNI networking --- #

    - name: Get POD_CIDR
      uri:
        url: http://metadata.google.internal/computeMetadata/v1/instance/attributes/pod-cidr
        method: GET
        return_content: true
        headers:
          Metadata-Flavor: "Google"
      register: pod_cidr_out
      tags: cni, kubelet

    - set_fact:
        pod_cidr: "{{ pod_cidr_out.content }}"
      tags: cni, kubelet

    - name: Create bridge network configuration
      copy:
        dest: /etc/cni/net.d/10-bridge.conf
        content: |
          {
              "cniVersion": "0.3.1",
              "name": "bridge",
              "type": "bridge",
              "bridge": "cnio0",
              "isGateway": true,
              "ipMasq": true,
              "ipam": {
                  "type": "host-local",
                  "ranges": [
                    [{"subnet": "{{ pod_cidr }}"}]
                  ],
                  "routes": [{"dst": "0.0.0.0/0"}]
              }
          }
      tags: cni

    - name: Create loopback network configuration
      copy:
        dest: /etc/cni/net.d/99-loopback.conf
        content: |
          {
              "cniVersion": "0.3.1",
              "type": "loopback"
          }
      tags: cni

  # --- configure Containerd --- #

    - name: create containerd config
      copy:
        dest: /etc/containerd/config.toml
        content: |
          [plugins]
            [plugins.cri.containerd]
              snapshotter = "overlayfs"
              [plugins.cri.containerd.default_runtime]
                runtime_type = "io.containerd.runtime.v1.linux"
                runtime_engine = "/usr/local/bin/runc"
                runtime_root = ""
              [plugins.cri.containerd.untrusted_workload_runtime]
                runtime_type = "io.containerd.runtime.v1.linux"
                runtime_engine = "/usr/local/bin/runsc"
                runtime_root = "/run/containerd/runsc"

    - name: create containerd systemd.unit
      copy:
        dest: /etc/systemd/system/containerd.service
        content: |
          [Unit]
          Description=containerd container runtime
          Documentation=https://containerd.io
          After=network.target

          [Service]
          ExecStartPre=/sbin/modprobe overlay
          ExecStart=/bin/containerd
          Restart=always
          RestartSec=5
          Delegate=yes
          KillMode=process
          OOMScoreAdjust=-999
          LimitNOFILE=1048576
          LimitNPROC=infinity
          LimitCORE=infinity

          [Install]
          WantedBy=multi-user.target

  # --- configure kubelet --- #

    - name: copy certs
      copy:
        src: ../kubernetes_the_hard_way/certs/{{ item.src }}
        dest: /var/lib/kubelet/{{ item.dest }}
      with_items:
        - { src: "{{ ansible_hostname }}.pem",      dest: "{{ ansible_hostname }}.pem" }
        - { src: "{{ ansible_hostname }}-key.pem",  dest: "{{ ansible_hostname }}-key.pem" }
        - { src: "{{ ansible_hostname }}.kubeconfig", dest: "kubeconfig" }
      tags: kubelet
    
    - name: copy ca.pem
      copy:
        src: ../kubernetes_the_hard_way/certs/ca.pem
        dest: /var/lib/kubernetes/ca.pem
      tags: kubelet

    - name: create kubelet config
      copy:
        dest: /var/lib/kubelet/kubelet-config.yaml
        content: |
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: "/var/lib/kubernetes/ca.pem"
          authorization:
            mode: Webhook
          clusterDomain: "cluster.local"
          clusterDNS:
            - "10.32.0.10"
          podCIDR: "{{ pod_cidr }}"
          runtimeRequestTimeout: "15m"
          tlsCertFile: "/var/lib/kubelet/{{ ansible_hostname }}.pem"
          tlsPrivateKeyFile: "/var/lib/kubelet/{{ ansible_hostname }}-key.pem"
      tags: kubelet

    - name: create kubelet systemd.unit
      copy:
        dest: /etc/systemd/system/kubelet.service
        content: |
          [Unit]
          Description=Kubernetes Kubelet
          Documentation=https://github.com/kubernetes/kubernetes
          After=containerd.service
          Requires=containerd.service

          [Service]
          ExecStart=/usr/local/bin/kubelet \
            --config=/var/lib/kubelet/kubelet-config.yaml \
            --container-runtime=remote \
            --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \
            --image-pull-progress-deadline=2m \
            --kubeconfig=/var/lib/kubelet/kubeconfig \
            --network-plugin=cni \
            --register-node=true \
            --v=2
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
      tags: kubelet

  # --- configure k8s proxy --- #

    - name: copy certs kube-proxy
      copy:
        src: ../kubernetes_the_hard_way/certs/{{ item.src }}
        dest: /var/lib/kube-proxy/{{ item.dest }}
      with_items:
        - { src: "kube-proxy.kubeconfig", dest: "kubeconfig" }
      tags: kube-proxy

    - name: create kube-proxy config
      copy:
        dest: /var/lib/kube-proxy/kube-proxy-config.yaml
        content: |
          kind: KubeProxyConfiguration
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          clientConnection:
            kubeconfig: "/var/lib/kube-proxy/kubeconfig"
          mode: "iptables"
          clusterCIDR: "10.200.0.0/16"
      tags: kube-proxy

    - name: create kubelet systemd.unit
      copy:
        dest: /etc/systemd/system/kube-proxy.service
        content: |
          [Unit]
          Description=Kubernetes Kube Proxy
          Documentation=https://github.com/kubernetes/kubernetes

          [Service]
          ExecStart=/usr/local/bin/kube-proxy \
            --config=/var/lib/kube-proxy/kube-proxy-config.yaml
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
      tags: kube-proxy


    - name: start systemd services
      systemd:
        name: "{{ item }}"
        daemon_reload: true
        state: started
        enabled: true
      with_items:
        - containerd
        - kubelet
        - kube-proxy
      tags: kubelet, kube-proxy

